#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NocoDB API v2
"""

import asyncio
import aiohttp
import logging
from config import NOCODB_TOKEN, NOCODB_TABLE

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_nocodb_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NocoDB API v2"""
    
    logger.info("=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NocoDB API v2 ===")
    logger.info(f"–¢–æ–∫–µ–Ω: {NOCODB_TOKEN[:10]}...")
    logger.info(f"–¢–∞–±–ª–∏—Ü–∞: {NOCODB_TABLE}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±–ª–∞—á–Ω—ã–π –¥–æ–º–µ–Ω
    base_url = f'https://app.nocodb.com/api/v2/tables/{NOCODB_TABLE}/records'
    
    headers = {
        'xc-token': NOCODB_TOKEN,
        'Content-Type': 'application/json'
    }
    
    logger.info(f"\n--- –¢–µ—Å—Ç URL: {base_url} ---")
    
    try:
        async with aiohttp.ClientSession() as session:
            # –¢–µ—Å—Ç GET –∑–∞–ø—Ä–æ—Å–∞
            logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å...")
            async with session.get(base_url, headers=headers) as resp:
                logger.info(f"–°—Ç–∞—Ç—É—Å: {resp.status}")
                
                if resp.status == 200:
                    data = await resp.json()
                    total_rows = data.get('pageInfo', {}).get('totalRows', 0)
                    logger.info(f"‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_rows}")
                    logger.info(f"‚úÖ –†–∞–±–æ—á–∏–π URL: {base_url}")
                    return True, base_url
                else:
                    error_text = await resp.text()
                    logger.error(f"‚ùå –û–®–ò–ë–ö–ê {resp.status}: {error_text[:200]}")
                    
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
                    if resp.status == 404:
                        logger.error("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 404:")
                        logger.error("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã")
                        logger.error("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω API")
                        logger.error("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    elif resp.status == 401:
                        logger.error("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 401:")
                        logger.error("1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω API")
                        logger.error("2. –¢–æ–∫–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                        logger.error("3. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
                    elif resp.status == 403:
                        logger.error("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 403:")
                        logger.error("1. –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ")
                        logger.error("2. –¢–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã—Ö –ø—Ä–∞–≤")
                    
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    logger.error("‚ùå URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return False, None

async def test_create_record(working_url=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ NocoDB"""
    
    if not working_url:
        logger.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –Ω–µ—Ç —Ä–∞–±–æ—á–µ–≥–æ URL")
        return False
    
    logger.info(f"\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ ===")
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º URL: {working_url}")
    
    headers = {
        'xc-token': NOCODB_TOKEN,
        'Content-Type': 'application/json'
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    test_data = {
        "–ù–æ–º–µ—Ä": "1",
        "–ì—Ä—É–ø–ø–∞": "–°–∞—Ö–∫–æ–º", 
        "–ú–µ–Ω–µ–¥–∂–µ—Ä": "@vorobey",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": "@dimaz"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å...")
            async with session.post(working_url, json=test_data, headers=headers) as resp:
                logger.info(f"–°—Ç–∞—Ç—É—Å: {resp.status}")
                
                if resp.status == 200:
                    response_data = await resp.json()
                    logger.info(f"‚úÖ –£–°–ü–ï–•! –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {response_data}")
                    return True
                else:
                    error_text = await resp.text()
                    logger.error(f"‚ùå –û–®–ò–ë–ö–ê {resp.status}: {error_text[:300]}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ NocoDB...")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok, working_url = await test_nocodb_connection()
    
    if connection_ok:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        await test_create_record(working_url)
    
    logger.info("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if not connection_ok:
        logger.info("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω API –≤ config.py")
        logger.info("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã")
        logger.info("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        logger.info("4. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ NocoDB")
        logger.info("5. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API v1 –≤–º–µ—Å—Ç–æ v2")
    else:
        logger.info("‚úÖ NocoDB –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞—è–≤–æ–∫")

if __name__ == '__main__':
    asyncio.run(main()) 