from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import any_state
from utils.dialog_manager import dialog_manager
from keyboards.user import get_main_menu_keyboard
import logging
from utils.nocodb import NOCODB_TOKEN, NOCODB_TABLE
import aiohttp
from config import ADMIN_IDS
from keyboards.user import GROUPS

logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
async def handle_dialog_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ
    dialog_id = dialog_manager.is_user_in_dialog(user_id)
    if not dialog_id:
        return
    
    participants = dialog_manager.get_dialog_participants(dialog_id)
    if not participants:
        return
    
    user_id_dialog, manager_id, group_name = participants
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    recipient_id = manager_id if user_id == user_id_dialog else user_id_dialog
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –∫—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    is_manager_sender = (user_id == manager_id)
    is_user_recipient = (recipient_id == user_id_dialog)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if is_manager_sender and is_user_recipient:
        sender_label = '–º–µ–Ω–µ–¥–∂–µ—Ä–∞'
    else:
        sender_label = f"{('@' + message.from_user.username) if message.from_user.username else message.from_user.full_name}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        sent_message = await message.bot.send_message(
            recipient_id,
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {('–º–µ–Ω–µ–¥–∂–µ—Ä–∞' if is_manager_sender and is_user_recipient else sender_label)}:\n\n{message.text}",
            reply_markup=dialog_manager.get_dialog_keyboard(is_manager=(recipient_id == manager_id))
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.add_message_to_dialog(dialog_id, message.message_id)
        dialog_manager.add_message_to_dialog(dialog_id, sent_message.message_id)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=dialog_manager.get_dialog_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ
async def handle_dialog_file(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –¥–∏–∞–ª–æ–≥–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ
    dialog_id = dialog_manager.is_user_in_dialog(user_id)
    if not dialog_id:
        return
    
    participants = dialog_manager.get_dialog_participants(dialog_id)
    if not participants:
        return
    
    user_id_dialog, manager_id, group_name = participants
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    recipient_id = manager_id if user_id == user_id_dialog else user_id_dialog
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –∫—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    is_manager_sender = (user_id == manager_id)
    is_user_recipient = (recipient_id == user_id_dialog)
    
    # –î–ª—è —Ñ–∞–π–ª–æ–≤:
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if is_manager_sender and is_user_recipient:
        sender_label = '–º–µ–Ω–µ–¥–∂–µ—Ä–∞'
    else:
        sender_label = f"{('@' + message.from_user.username) if message.from_user.username else message.from_user.full_name}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    try:
        if message.document:
            sent_message = await message.bot.send_document(
                recipient_id,
                message.document.file_id,
                caption=f"üìé –§–∞–π–ª –æ—Ç {('–º–µ–Ω–µ–¥–∂–µ—Ä–∞' if is_manager_sender and is_user_recipient else sender_label)}: {message.document.file_name}",
                reply_markup=dialog_manager.get_dialog_keyboard(is_manager=(recipient_id == manager_id))
            )
        elif message.photo:
            sent_message = await message.bot.send_photo(
                recipient_id,
                message.photo[-1].file_id,
                caption=f"üñº –§–æ—Ç–æ –æ—Ç {('–º–µ–Ω–µ–¥–∂–µ—Ä–∞' if is_manager_sender and is_user_recipient else sender_label)}",
                reply_markup=dialog_manager.get_dialog_keyboard(is_manager=(recipient_id == manager_id))
            )
        elif message.video:
            sent_message = await message.bot.send_video(
                recipient_id,
                message.video.file_id,
                caption=f"üé• –í–∏–¥–µ–æ –æ—Ç {('–º–µ–Ω–µ–¥–∂–µ—Ä–∞' if is_manager_sender and is_user_recipient else sender_label)}",
                reply_markup=dialog_manager.get_dialog_keyboard(is_manager=(recipient_id == manager_id))
            )
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_manager.add_message_to_dialog(dialog_id, message.message_id)
        dialog_manager.add_message_to_dialog(dialog_id, sent_message.message_id)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await message.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=dialog_manager.get_dialog_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ –¥–∏–∞–ª–æ–≥–µ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
async def end_dialog_callback(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ
    dialog_id = dialog_manager.is_user_in_dialog(user_id)
    if not dialog_id:
        await call.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    participants = dialog_manager.get_dialog_participants(dialog_id)
    if not participants:
        await call.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id_dialog, manager_id, group_name = participants
    
    # –ü–æ–ª—É—á–∞–µ–º username –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –¥–∏–∞–ª–æ–≥
    ender_username = f"@{call.from_user.username}" if call.from_user.username else f"@{call.from_user.full_name}"
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    other_user_id = manager_id if user_id == user_id_dialog else user_id_dialog
    
    try:
        await call.bot.send_message(
            other_user_id,
            f"üîö –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {ender_username}",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    dialog_manager.end_dialog(dialog_id)

    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ cuuo5irznu0dyde —á–µ—Ä–µ–∑ —É–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    try:
        application_number = dialog_id.split('_')[-1]
        base_url = f'https://app.nocodb.com/api/v2/tables/{NOCODB_TABLE}/records?page_size=1000'
        headers = {'xc-token': NOCODB_TOKEN, 'Content-Type': 'application/json'}
        async with aiohttp.ClientSession() as session:
            async with session.get(base_url, headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    records = data.get('list', [])
                    record = next((r for r in records if str(r.get('–ù–æ–º–µ—Ä')) == str(application_number)), None)
                    if record:
                        record_id = record.get('Id')
                        # –ï—Å–ª–∏ –ø–æ–ª–µ —É–∂–µ '–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
                        if record.get('cuuo5irznu0dyde') != '–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞':
                            who = '–º–µ–Ω–µ–¥–∂–µ—Ä' if user_id == manager_id else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                            # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
                            del_url = f'https://app.nocodb.com/api/v2/tables/{NOCODB_TABLE}/records/{record_id}'
                            await session.delete(del_url, headers=headers)
                            # 2. –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è, –∫—Ä–æ–º–µ Id, –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                            new_data = record.copy()
                            new_data.pop('Id', None)
                            new_data['ck2mdpjv0b3hyml'] = f'–ó–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ {who}'
                            new_data['–°—Ç–∞—Ç—É—Å'] = f'–ó–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥ {who}'
                            # 3. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                            post_url = f'https://app.nocodb.com/api/v2/tables/{NOCODB_TABLE}/records'
                            await session.post(post_url, json=new_data, headers=headers)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await call.message.edit_text(
        f"üîö –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"–ó–∞–≤–µ—Ä—à–∏–ª: {ender_username}",
        reply_markup=get_main_menu_keyboard()
    )
    
    await call.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
async def dialog_info_callback(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ
    dialog_id = dialog_manager.is_user_in_dialog(user_id)
    if not dialog_id:
        await call.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    participants = dialog_manager.get_dialog_participants(dialog_id)
    if not participants:
        await call.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id_dialog, manager_id, group_name = participants
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
    if user_id != manager_id:
        await call.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–∑ dialog_id
    application_number = dialog_id.split('_')[-1]
    
    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_info = await call.bot.get_chat(user_id_dialog)
        user_username = f"@{user_info.username}" if user_info.username else f"@user_{user_id_dialog}"
    except Exception as e:
        user_username = f"@user_{user_id_dialog}"
    
    # –ü–æ–ª—É—á–∞–µ–º username –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_username = f"@{call.from_user.username}" if call.from_user.username else f"@manager_{manager_id}"
    
    info_text = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ\n\n"
        f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_number}\n"
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_username}\n"
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_username}"
    )
    
    await call.message.edit_text(
        info_text,
        reply_markup=dialog_manager.get_dialog_keyboard(is_manager=True)
    )
    
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
async def dialog_done_callback(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    dialog_id = dialog_manager.is_user_in_dialog(user_id)
    if not dialog_id:
        await call.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    participants = dialog_manager.get_dialog_participants(dialog_id)
    if not participants:
        await call.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    user_id_dialog, manager_id, group_name = participants
    if user_id != manager_id:
        await call.answer("‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É")
        return
    application_number = dialog_id.split('_')[-1]
    # –ò—â–µ–º –∑–∞—è–≤–∫—É –≤ NocoDB –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    base_url = f'https://app.nocodb.com/api/v2/tables/{NOCODB_TABLE}/records?page_size=1000'
    headers = {'xc-token': NOCODB_TOKEN, 'Content-Type': 'application/json'}
    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                records = data.get('list', [])
                record = next((r for r in records if str(r.get('–ù–æ–º–µ—Ä')) == str(application_number)), None)
                if record:
                    record_id = record.get('Id')
                    # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
                    del_url = f'https://app.nocodb.com/api/v2/tables/{NOCODB_TABLE}/records/{record_id}'
                    await session.delete(del_url, headers=headers)
                    # 2. –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è, –∫—Ä–æ–º–µ Id, –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    new_data = record.copy()
                    new_data.pop('Id', None)
                    new_data['ck2mdpjv0b3hyml'] = '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
                    new_data['–°—Ç–∞—Ç—É—Å'] = '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
                    # 3. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    post_url = f'https://app.nocodb.com/api/v2/tables/{NOCODB_TABLE}/records'
                    await session.post(post_url, json=new_data, headers=headers)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        for admin_id in ADMIN_IDS:
            await call.bot.send_message(admin_id, f"‚úÖ –ó–∞—è–≤–∫–∞ {application_number} –ø–æ –≥—Ä—É–ø–ø–µ '{group_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!")
    except Exception:
        pass
    await call.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ {application_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!", reply_markup=None)
    await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        user_id_dialog, manager_id, group_name = participants
        group_url = None
        for name, url in GROUPS:
            if name == group_name:
                group_url = url
                break
        kb = None
        if group_url:
            kb = types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø—É', url=group_url)
            )
        await call.bot.send_message(
            user_id_dialog,
            f'‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {application_number} –ø–æ –≥—Ä—É–ø–ø–µ "{group_name}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ.',
            reply_markup=kb
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_dialog_handlers(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
    dp.register_message_handler(
        handle_dialog_message, 
        content_types=['text'],
        state=any_state
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ
    dp.register_message_handler(
        handle_dialog_file,
        content_types=['document', 'photo', 'video'],
        state=any_state
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
    dp.register_callback_query_handler(
        end_dialog_callback,
        lambda c: c.data == "end_dialog"
    )
    
    dp.register_callback_query_handler(
        dialog_info_callback,
        lambda c: c.data == "dialog_info"
    ) 
    dp.register_callback_query_handler(dialog_done_callback, lambda c: c.data == "dialog_done") 