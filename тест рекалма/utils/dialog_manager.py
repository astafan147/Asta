import logging
from typing import Dict, Tuple, Optional
from aiogram import types
from aiogram.dispatcher import FSMContext

logger = logging.getLogger(__name__)

class DialogManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –º–µ–∂–¥—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {dialog_id: (user_id, manager_id, group_name)}
        self.active_dialogs: Dict[str, Tuple[int, int, str]] = {}
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–æ–≤: {dialog_id: [message_ids]}
        self.dialog_messages: Dict[str, list] = {}
    
    def create_dialog(self, user_id: int, manager_id: int, group_name: str, application_number: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            manager_id: ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            group_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            application_number: –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            
        Returns:
            dialog_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–∏–∞–ª–æ–≥–∞
        """
        dialog_id = f"dialog_{user_id}_{manager_id}_{application_number}"
        self.active_dialogs[dialog_id] = (user_id, manager_id, group_name)
        self.dialog_messages[dialog_id] = []
        logger.info(f"–°–æ–∑–¥–∞–Ω –¥–∏–∞–ª–æ–≥ {dialog_id} –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º {manager_id}")
        return dialog_id
    
    def get_dialog_participants(self, dialog_id: str) -> Optional[Tuple[int, int, str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""
        return self.active_dialogs.get(dialog_id)
    
    def is_user_in_dialog(self, user_id: int) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ"""
        for dialog_id, (u_id, m_id, _) in self.active_dialogs.items():
            if u_id == user_id or m_id == user_id:
                return dialog_id
        return None
    
    def add_message_to_dialog(self, dialog_id: str, message_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if dialog_id in self.dialog_messages:
            self.dialog_messages[dialog_id].append(message_id)
    
    def end_dialog(self, dialog_id: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
        if dialog_id in self.active_dialogs:
            del self.active_dialogs[dialog_id]
        if dialog_id in self.dialog_messages:
            del self.dialog_messages[dialog_id]
        logger.info(f"–î–∏–∞–ª–æ–≥ {dialog_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def get_dialog_keyboard(self, is_manager: bool = False) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        if is_manager:
            keyboard.add(
                types.InlineKeyboardButton("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ", callback_data="dialog_info"),
                types.InlineKeyboardButton("‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data="dialog_done"),
                types.InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")
            )
        else:
            keyboard.add(
                types.InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")
            )
        return keyboard

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_manager = DialogManager() 